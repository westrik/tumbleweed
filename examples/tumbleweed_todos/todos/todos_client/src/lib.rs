extern crate wee_alloc;

use tumbleweed_todos_core::*;
use wasm_bindgen::prelude::*;

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

// TODO: reduce bundle size by:
//  - removing panic infrastructure
//  - wasm-opt
//  - serde-wasm-bindgen
//  - ...?

// OQ: how should this be organized? We'll need wrappers for WASM and native
// - add proc macro to wrap with correct fn & type depending on arch?

// TODO: replace #[wasm_bindgen] with another proc macro that renames the function & wraps it?
fn __get_value() -> TestData {
    TestData {
        message: "hehe".to_string(),
    }
}

#[wasm_bindgen]
pub fn get_value() -> JsValue {
    let result = __get_value();
    JsValue::from_serde(&result).unwrap()
    // TODO: generate .d.ts from schema
    // - type is erased by serialization
    //   (i.e. TS types generated by wasm-pack return `any`)
}

// #[wasm_bindgen]
// pub fn transform_value(value: &JsValue) -> JsValue {
//
// }

// #[cfg(test)]
// mod tests {
//     #[test]
//     fn it_works() {
//         assert_eq!(2 + 2, 4);
//     }
// }
